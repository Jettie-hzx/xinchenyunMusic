{"version":3,"sources":["moment.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nvar _bind = Function.prototype.bind;\nvar _slice = Array.prototype.slice;\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory();\n})(window, function () {\n    \n    var FORMAT_LIST = {\n        \"l\": \"YYYY-MM-DD\",\n        \"ll\": \"YYYY年MM月DD日\",\n        \"k\": \"YYYY-MM-DD hh:mm\",\n        \"kk\": \"YYYY年MM月DD日 hh点mm分\",\n        \"kkk\": \"YYYY年MM月DD日 hh点mm分 q\",\n        \"f\": \"YYYY-MM-DD hh:mm:ss\",\n        \"ff\": \"YYYY年MM月DD日 hh点mm分ss秒\",\n        \"fff\": \"YYYY年MM月DD日 hh点mm分ss秒 星期w\",\n        \"n\": \"MM-DD\",\n        \"nn\": \"MM月DD日\"\n    };\n\n    var _SECONDS = 1000;\n    var _MINUTES = 1000 * 60;\n    var _HOURS = 1000 * 60 * 60;\n    var _DAYS = 1000 * 60 * 60 * 24;\n    var _WEEKS = _DAYS * 7;\n    var _YEARS = _DAYS * 365;\n    var MSE = new Date(1970, 0, 1, 0, 0, 0).getTime();\n\n    var WEEK = ['日', '一', '二', '三', '四', '五', '六'];\n    var DAY_STRING = ['上午', '下午'];\n    var _moment = function _moment() {\n        Utils.initMoment.apply(Utils, [this].concat(_slice.call(arguments)));\n    };\n\n    var Utils = {\n        initMoment: function initMoment(moment_obj, arg_1, type) {\n            var _date = new Date(),\n                date_bak = _date;\n            if (arg_1 != undefined) {\n                if (Utils.isNumber(arg_1)) {\n                    if (arg_1 < 9999999999) arg_1 = arg_1 * 1000;\n                    _date.setTime(arg_1);\n                } else if (Utils.isArray(arg_1)) {\n                    Utils.padMonth(arg_1);\n                    _date = new (_bind.apply(Date, [null].concat(_toConsumableArray(arg_1))))();\n                } else if (Utils.isDate(arg_1)) {\n                    _date = arg_1;\n                } else if (Utils.isString(arg_1)) {\n                    _date = Utils.parse(arg_1);\n                } else if (arg_1 instanceof _moment) {\n                    return arg_1;\n                }\n            }\n            moment_obj._date = _date;\n            if (date_bak === _date && moment_obj.timeDelay != 0) {\n                moment_obj.add(moment_obj.timeDelay, moment.TIME);\n            }\n        },\n        parse: function parse(str) {\n            var aspNetJsonRegex = /^(\\d{4})\\-?(\\d{2})\\-?(\\d{2})\\s?\\:?(\\d{2})?\\:?(\\d{2})?\\:?(\\d{2})?$/i;\n            var matched = aspNetJsonRegex.exec(str);\n            if (matched !== null) {\n                matched.shift();\n                Utils.padMonth(matched);\n                Utils.popUndefined(matched);\n                return new (_bind.apply(Date, [null].concat(_toConsumableArray(matched))))();\n            }\n            var date = new Date(str);\n            if (date == \"Invalid Date\") {\n                console.error(\"Invalid date parse from \\\"\" + str + \"\\\"\");\n                return null;\n            } else {\n                return date;\n            }\n        },\n        popUndefined: function popUndefined(arr) {\n            if (arr.length > 0 && arr[arr.length - 1] == undefined) {\n                arr.pop();\n                return Utils.popUndefined(arr);\n            }\n            return arr;\n        },\n        padMonth: function padMonth(arr) {\n            //自动补充月份\n            if (arr.length > 1 && arr[1] > 0) arr[1] -= 1;\n        },\n        isLeapYear: function isLeapYear(year) {\n            return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n        },\n        format: function format(date, formatStr) {\n            var str = formatStr;\n            str = str.replace(/yyyy|YYYY/, date.getFullYear());\n            str = str.replace(/yy|YY/, date.getYear() % 100 > 8 ? (date.getYear() % 100).toString() : '0' + date.getYear() % 100);\n            str = str.replace(/MM/, date.getMonth() > 8 ? (date.getMonth() + 1).toString() : '0' + (date.getMonth() + 1));\n            str = str.replace(/M/g, date.getMonth() + 1);\n            str = str.replace(/w|W/g, WEEK[date.getDay()]);\n            str = str.replace(/dd|DD/, date.getDate() > 9 ? date.getDate().toString() : '0' + date.getDate());\n            str = str.replace(/d|D/g, date.getDate());\n            str = str.replace(/hh|HH/, date.getHours() > 9 ? date.getHours().toString() : '0' + date.getHours());\n            str = str.replace(/h|H/g, date.getHours());\n            str = str.replace(/mm/, date.getMinutes() > 9 ? date.getMinutes().toString() : '0' + date.getMinutes());\n            str = str.replace(/m/g, date.getMinutes());\n            str = str.replace(/ss|SS/, date.getSeconds() > 9 ? date.getSeconds().toString() : '0' + date.getSeconds());\n            str = str.replace(/s|S/g, date.getSeconds());\n            str = str.replace(/q|Q/g, date.getHours() > 12 ? DAY_STRING[1] : DAY_STRING[0]);\n            return str;\n        },\n        timestamp: function timestamp(date) {\n            return Math.floor(date.getTime() / 1000);\n        },\n        getDays: function getDays(date) {\n            return Math.floor((date.getTime() - MSE) / _DAYS);\n        },\n        getHours: function getHours(date) {\n            return Math.floor((date.getTime() - MSE) / _HOURS);\n        },\n        getMonths: function getMonths(date) {\n            return date.getYear() * 12 + date.getMonth() + 1;\n        },\n        isObject: function isObject(input) {\n            return Object.prototype.toString.call(input) === '[object Object]';\n        },\n        isArray: function isArray(input) {\n            return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n        },\n        isDate: function isDate(input) {\n            return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\n        },\n        isNumber: function isNumber(input) {\n            return input instanceof Number || Object.prototype.toString.call(input) === '[object Number]';\n        },\n        isString: function isString(input) {\n            return input instanceof String || Object.prototype.toString.call(input) === '[object String]';\n        },\n        extend: function extend(a, b) {\n            for (var i in b) {\n                if (hasOwnProp(b, i)) {\n                    a[i] = b[i];\n                }\n            }\n\n            if (hasOwnProp(b, 'toString')) {\n                a.toString = b.toString;\n            }\n\n            if (hasOwnProp(b, 'valueOf')) {\n                a.valueOf = b.valueOf;\n            }\n\n            return a;\n        },\n        makeGetSet: function makeGetSet(unit) {\n            return function (value) {\n                if (value != undefined) {\n                    // if(unit==\"Month\")value = value>0?(value-1):0;\n                    Date.prototype[\"set\" + unit].call(this._date, value);\n                    return this;\n                } else {\n                    return Date.prototype[\"get\" + unit].call(this._date);\n                    // return unit==\"Month\"?(result+1):result;\n                }\n            };\n        }\n    };\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    _moment.prototype = {\n        timeDelay: 0,\n        format: function format(str) {\n            var m = this;\n\n            var v = this.isValid();\n            if (v !== true) return v;\n\n            str = str || \"l\";\n            var formatStr = FORMAT_LIST[str] || str;\n            return Utils.format(m._date, formatStr);\n        },\n        toString: function toString() {\n            var v = this.isValid();\n            if (v !== true) return v;\n            return this._date.toString();\n        },\n        toISOString: function toISOString() {\n            var v = this.isValid();\n            if (v !== true) return v;\n            return this._date.toISOString();\n        },\n        distance: function distance(_m, type) {\n            var v = this.isValid();\n            if (v !== true) return v;\n            var m = this;\n            type = type || moment.DAY;\n            _m = moment(_m);\n            v = _m.isValid();\n            if (v !== true) return v;\n            switch (type) {\n                case moment.HOUR:\n                    return Utils.getHours(m._date) - Utils.getHours(_m._date);\n                case moment.DAY:\n                    return Utils.getDays(m._date) - Utils.getDays(_m._date);\n                case moment.MONTH:\n                    return Utils.getMonths(m._date) - Utils.getMonths(_m._date);\n                case moment.YEAR:\n                    return m._date.getYear() - _m._date.getYear();\n            }\n            return 0;\n        },\n        getWeekOfYear: function getWeekOfYear(weekStart) {\n            var diff = 0;\n            if (weekStart && weekStart == moment.MONDAY) {\n                diff = 1;\n            }\n            var _date = this._date;\n            var year = _date.getFullYear();\n            var firstDay = new Date(year, 0, 1);\n            var firstWeekDays = 7 - firstDay.getDay() + diff;\n            var dayOfYear = (new Date(year, _date.getMonth(), _date.getDate()) - firstDay) / (24 * 3600 * 1000) + 1;\n            return Math.ceil((dayOfYear - firstWeekDays) / 7) + 1;\n        },\n        getWeekOfMonth: function getWeekOfMonth(weekStart) {\n            var diff = 0;\n            if (weekStart && weekStart == moment.MONDAY) {\n                diff = 1;\n            }\n            var dayOfWeek = this.day();\n            var day = this.date();\n            return Math.ceil((day - dayOfWeek - 1) / 7) + (dayOfWeek >= weekStart ? 1 : 0);\n        },\n        isLeapYear: function isLeapYear() {\n            var v = this.isValid();\n            if (v !== true) return v;\n            return Utils.isLeapYear(this.year());\n        },\n        isThisYear: function isThisYear() {\n            var v = this.isValid();\n            if (v !== true) return v;\n            return Utils.timestamp(this._date);\n        },\n        isBefore: function isBefore() {\n            var v = this.isValid();\n            if (v !== true) return v;\n            return Utils.timestamp(this._date);\n        },\n        isAfter: function isAfter() {\n            var v = this.isValid();\n            if (v !== true) return v;\n            return Utils.timestamp(this._date);\n        },\n        month: function month(num) {\n            var v = this.isValid();\n            if (v !== true) return v;\n            var m = this;\n            if (num == undefined) {\n                return m._date.getMonth() + 1;\n            }\n            num = parseInt(num);\n            num = m._date.setMonth(num - 1);\n            return m;\n        },\n        add: function add(num, type) {\n            var v = this.isValid();\n            if (v !== true) return v;\n            var m = this;\n            num = parseInt(num);\n            type = type || moment.DAY;\n\n            switch (type) {\n                case moment.DAY:\n                    m.time(m.time() + num * _DAYS);\n                    break;\n                case moment.MONTH:\n                    var month_add = m.month() + num;\n                    var year_add = Math.floor(month_add / 12);\n                    month_add = month_add % 12;\n                    m.add(year_add, moment.YEAR);\n                    m.month(month_add);\n                    break;\n                case moment.YEAR:\n                    m.year(m.year() + num);\n                    break;\n                case moment.WEEK:\n                    m.time(m.time() + num * _WEEKS);\n                    break;\n                case moment.HOUR:\n                    m.time(m.time() + num * _HOURS);\n                    break;\n                case moment.MINUTE:\n                    m.time(m.time() + num * _MINUTES);\n                    break;\n                case moment.SECOND:\n                    m.time(m.time() + num * _SECONDS);\n                    break;\n                case moment.TIME:\n                    m.time(m.time() + num);\n                    break;\n            }\n            return m;\n        },\n        endOf: function endOf(type, set) {\n            var v = this.isValid();\n            if (v !== true) return v;\n            var m = this;\n            type = type || moment.DAY;\n            m.startOf(type, set);\n            m.add(1, type);\n            // if (moment.DAY == type||moment.WEEK == type) {\n            m.add(-1, moment.SECOND);\n            // } else {\n            // m.add(-1, moment.DAY);\n            // }\n            return m;\n        },\n        startOf: function startOf(type, set) {\n            var v = this.isValid();\n            if (v !== true) return v;\n            var m = this;\n            type = type || moment.DAY;\n            switch (type) {\n                case moment.DAY:\n                    m.milliseconds(0);\n                    m.seconds(0);\n                    m.minutes(0);\n                    m.hours(0);\n                    break;\n                case moment.MONTH:\n                    m.date(1);\n                    m.startOf(moment.DAY);\n                    break;\n                case moment.WEEK:\n                    m.startOf(moment.DAY);\n                    set = set || moment.SUNDAY;\n                    var startDay = set == moment.SUNDAY ? 0 : 1;\n                    m.add(-m.day() + startDay, moment.DAY);\n                    break;\n                case moment.YEAR:\n                    m.month(1);\n                    m.date(1);\n                    m.startOf(moment.DAY);\n                    break;\n                case moment.HOUR:\n                    m.time(Math.floor(m.time() / _HOURS) * _HOURS);\n                    break;\n            }\n            return m;\n        },\n        isValid: function isValid() {\n            return Utils.isDate(this._date) ? true : \"Invalid Date\";\n        }\n    };\n\n    var momentPrototype__proto = _moment.prototype;\n\n    var methods = {\n        \"year\": \"FullYear\",\n        \"day\": \"Day\",\n        \"date\": \"Date\",\n        \"hours\": \"Hours\",\n        \"milliseconds\": \"Milliseconds\",\n        \"seconds\": \"Seconds\",\n        \"minutes\": \"Minutes\",\n        \"time\": \"Time\"\n    };\n\n    for (var unit in methods) {\n        momentPrototype__proto[unit] = Utils.makeGetSet(methods[unit]);\n    }\n\n    var moment = function moment(param) {\n        if (param instanceof _moment) {\n            return param;\n        } else if (Utils.isObject(param)) {\n            //config\n            if (param.formatString && Utils.isObject(param.formatString)) {\n                Utils.extend(FORMAT_LIST, param.formatString);\n            }\n            if (param.now) {\n                _moment.prototype.timeDelay = moment(param.now).time() - moment().time();\n            }\n        } else {\n            return new _moment(param);\n        }\n    };\n\n    moment.config = function (param) {\n        if (param.formatString && Utils.isObject(param.formatString)) {\n            Utils.extend(FORMAT_LIST, param.formatString);\n        }\n        if (param.now) {\n            _moment.prototype.timeDelay = moment(param.now).time() - moment().time();\n        }\n    };\n\n    moment.SECOND = 2;\n    moment.MINUTE = 3;\n    moment.HOUR = 4;\n    moment.DAY = 5;\n    moment.MONTH = 6;\n    moment.YEAR = 7;\n    moment.WEEK = 8;\n    moment.TIME = 9;\n\n    moment.MONDAY = 1;\n    moment.SUNDAY = 2;\n    return moment;\n});"]}